{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["WEB_URI","App","react_default","a","createElement","App_Form","React","Component","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addName","event","preventDefault","previousName","state","persons","slice","person","name","newName","number","newNumber","adding","concat","axios","post","then","res","console","log","data","handleCheck","setState","handleNameChange","target","value","handleNumberChange","handleRemove","url","id","delete","previousState","filter","m","catch","err","removeMovie","e","_this2","get","val","some","item","_this3","onSubmit","onChange","type","map","i","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be1674eb.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\n\nconst WEB_URI = \"https://mighty-waters-40351.herokuapp.com/api/persons\"\n\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <Form />\n    )\n  }\n}\n\nclass Form extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      persons: [] ,\n      newName: '',\n      newNumber: ''\n    }\n  }\n\n  componentDidMount() {\n   \n    axios.get(WEB_URI)\n      .then(res => {\n        //const persons = res.data;\n        this.setState({ persons: res.data});\n      })\n  }\n  \n  addName = (event) => {\n    event.preventDefault()\n    const previousName =  this.state.persons.slice();\n    const person = {\n      name: this.state.newName,\n      number: this.state.newNumber,\n    } \n    var adding = previousName.concat({name: this.state.newName,number: this.state.newNumber})\n\n    axios.post(WEB_URI, person)\n    .then(res => {console.log(res.data)\n      this.handleCheck(this.state.newName) == false ?\n      this.setState({\n        persons: adding,\n        newName :'',\n        newNumber:''\n      }): this.setState({\n        persons: previousName,\n        newName :'',\n        newNumber: ''\n      })\n    })\n  }\n\n  handleNameChange = (event) => {\n    console.log(event.target.value)\n    this.setState({ newName: event.target.value })\n  }\n\n  handleNumberChange = (event) => {\n    console.log(event.target.value)\n    this.setState({ newNumber: event.target.value })\n  }\n\n  handleCheck(val) {\n    return this.state.persons.some(item => val === item.name);\n  }\n\n  handleRemove = person => {\n    const url = `https://mighty-waters-40351.herokuapp.com/api/persons${person.id}`;\n   \n    axios\n      .delete(url)\n      .then(res => {\n        this.setState(previousState => {\n          return {\n            persons: previousState.persons.filter(m => m.id !== person.id)\n          };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n  \n  removeMovie = (e, person) => {\n    e.preventDefault();\n  \n    if (this.handleRemove) {\n      this.handleRemove(person);\n    }\n  };\n\n  \n \n  render() {\n    return(\n      <div>\n        <h2>Puhelinluettelo</h2>\n        <form onSubmit={this.addName}>\n          <div>\n            nimi: <input \n                    value={this.state.newName}\n                    onChange={this.handleNameChange}\n                  />\n          </div>\n          <div>\n            numero: <input \n                      value={this.state.newNumber}\n                      onChange={this.handleNumberChange}\n                    />\n          </div>\n          <div>\n            <button type=\"submit\" >lisää</button>\n          </div>\n        </form>\n        <h2>Numerot</h2>\n        <ul>\n          {this.state.persons.map((person,i)=><li key={i}>{person.name}{\" \"}{person.number}{\" \"}<button type=\"submit\" onClick={e => this.removeMovie(e, person)} >poista</button></li>)}\n\n        </ul>\n        \n        \n\n      </div>\n    )\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}